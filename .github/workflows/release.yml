name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: vpn-deployer-linux-amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: vpn-deployer-linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: vpn-deployer-macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: vpn-deployer-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: vpn-deployer-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Install cargo-cross
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Set linker for cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV
      
      - name: Build binary (native)
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.os != 'ubuntu-latest'
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Build binary (cross)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: cross build --release --target ${{ matrix.target }}
      
      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ${{ matrix.name }}.tar.gz vpn-deployer
          mv ${{ matrix.name }}.tar.gz ../../../
      
      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ${{ matrix.name }}.zip vpn-deployer.exe
          mv ${{ matrix.name }}.zip ../../../
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-assets/
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}